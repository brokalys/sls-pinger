service: brokalys-pinger
useDotenv: true

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  logRetentionInDays: 7
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  tags:
    group: pinger
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - SNS:Publish
          Resource: 'arn:aws:sns:eu-west-1:*:*'
        - Effect: Allow
          Action:
            - SES:SendEmail
          Resource: 'arn:aws:ses:eu-west-1:*:*'
        - Effect: Allow
          Action:
            - S3:PutObject
            - S3:GetObject
          Resource: 'arn:aws:s3:::${self:provider.stage}-pinger-charts/*'
  environment:
    STAGE: ${opt:stage, 'dev'}
    DB_HOST: ${env:DB_HOST}
    DB_DATABASE: ${env:DB_DATABASE}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    MAILGUN_API_KEY: ${env:MAILGUN_API_KEY}
    MAILGUN_DOMAIN: ${env:MAILGUN_DOMAIN}

functions:
  email:
    name: BrokalysPinger-Email-${self:provider.stage}
    description: Send email and log it.
    reservedConcurrency: 4
    timeout: 10
    handler: src/email.run
    events:
      - sns: email-${self:provider.stage}
    alarms:
      - name: emailErrors
        description: 'Pinger: email sending errors'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 300 # 5 minutes
        evaluationPeriods: 2
        datapointsToAlarm: 2
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
      - name: emailInvocations
        description: 'Pinger: email sending invocations'
        namespace: 'AWS/Lambda'
        metric: Invocations
        threshold: 800
        statistic: Sum
        period: 86400 # 1 day
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: breaching

  limit-locker:
    name: BrokalysPinger-LimitLocker-${self:provider.stage}
    description: Lock pingers that have reached the monthly lockout threshold.
    timeout: 3
    handler: src/limit-locker.run
    events:
      - schedule:
          rate: rate(10 minutes)
    alarms:
      - name: limitLockerErrors
        description: 'Pinger: limit locker errors'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 300 # 5 minutes
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching

  process-sqs:
    name: BrokalysPinger-ProcessSqs-${self:provider.stage}
    description: Process SQS to trigger pinger email sending.
    handler: src/process-sqs.run
    reservedConcurrency: 5
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PingerQueue
              - Arn
          batchSize: 10

  process-summary-queue:
    name: BrokalysPinger-ProcessSummaryQueue-${self:provider.stage}
    description: Process pinger summary queue
    handler: src/process-summary-queue.run
    reservedConcurrency: 1
    events:
      - schedule:
          rate: cron(0 9 * * ? *)
          input:
            frequency: daily
      - schedule:
          rate: cron(0 9 ? * 2 *)
          input:
            frequency: weekly
      - schedule:
          rate: cron(0 9 1 * ? *)
          input:
            frequency: monthly
    dependsOn:
      - ChartBucket
    alarms:
      - name: processQueueErrors
        description: 'Pinger: summary queue processing errors'
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 300 # 5 minutes
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching

custom:
  alerts:
    stages:
      - prod
    nameTemplate: $[functionName]-$[metricName]
    topics:
      ok:
        topic: ${self:service}-${self:provider.stage}-ok
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com
      alarm:
        topic: ${self:service}-${self:provider.stage}-alarm
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: false
    packager: 'yarn'

  serverless-layers:
    packageManager: yarn
    dependenciesPath: ./package.json
    layersDeploymentBucket: ${self:provider.stage}-brokalys-lambda-layers
    customInstallationCommand: yarn install --production --ignore-scripts

plugins:
  - serverless-plugin-aws-alerts
  - serverless-webpack
  - serverless-layers

resources:
  Resources:
    PingerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-pinger.fifo
        FifoQueue: true
    ChartBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-pinger-charts
        AccessControl: AuthenticatedRead
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
              MaxAge: '3600'
        LifecycleConfiguration:
          Rules:
            - Id: ExpireCharBucketImages
              ExpirationInDays: 90
              Status: Enabled
