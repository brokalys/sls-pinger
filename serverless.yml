service: brokalys-pinger

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs12.x
  cfLogs: true
  logRetentionInDays: 7
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  environment:
      DB_HOST: ${file(serverless.env.yml):DB_HOST, env:DB_HOST}
      DB_DATABASE: ${file(serverless.env.yml):DB_DATABASE, env:DB_DATABASE}
      DB_USERNAME: ${file(serverless.env.yml):DB_USERNAME, env:DB_USERNAME}
      DB_PASSWORD: ${file(serverless.env.yml):DB_PASSWORD, env:DB_PASSWORD}
      DB_PROPERTIES_DATABASE: ${file(serverless.env.yml):DB_PROPERTIES_DATABASE, env:DB_PROPERTIES_DATABASE}
      MAILGUN_API_KEY: ${file(serverless.env.yml):MAILGUN_API_KEY, env:MAILGUN_API_KEY}
      MAILGUN_DOMAIN: ${file(serverless.env.yml):MAILGUN_DOMAIN, env:MAILGUN_DOMAIN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "arn:aws:sns:eu-west-1:*:*"

functions:
  init:
    name: BrokalysPinger-Init-${self:provider.stage}
    description: Initialize the active brokalys pingers.
    timeout: 4
    handler: src/init.run
    events:
      - schedule: rate(5 minutes)
    alarms:
      - functionErrors
      - functionInvocations
  pinger:
    name: BrokalysPinger-Ping-${self:provider.stage}
    description: Run individual pingers - collect data, send emails, log metrics.
    timeout: 4
    handler: src/pinger.run
    events:
      - sns: pinger
    alarms:
      - name: pingerErrors
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 300 # 5 minutes
        evaluationPeriods: 4
        datapointsToAlarm: 2
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
      - name: pingerInvocations
        namespace: 'AWS/Lambda'
        metric: Invocations
        threshold: 100
        statistic: Average
        period: 86400 # 1 day
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: breaching
      - name: functionDuration
  email:
    name: BrokalysPinger-Email-${self:provider.stage}
    description: Send email and log it.
    timeout: 5
    handler: src/email.run
    events:
      - sns: email
    alarms:
      - name: emailErrors
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 300 # 5 minutes
        evaluationPeriods: 2
        datapointsToAlarm: 2
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
      - name: emailInvocations
        namespace: 'AWS/Lambda'
        metric: Invocations
        threshold: 100
        statistic: Average
        period: 86400 # 1 day
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: breaching
  limit-locker:
    name: BrokalysPinger-LimitLocker-${self:provider.stage}
    description: Lock pingers that have reached the monthly lockout threshold.
    timeout: 2
    handler: src/limit-locker.run
    events:
      - schedule: rate(10 minutes)
    alarms:
      - functionErrors
      - functionInvocations

custom:
  alerts:
    topics:
      ok:
        topic: ${self:service}-${self:provider.stage}-ok
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com
      alarm:
        topic: ${self:service}-${self:provider.stage}-alarm
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com
    definitions:
      functionErrors:
        period: 300 # 5 minutes
        evaluationPeriods: 2
        datapointsToAlarm: 2
      functionInvocations:
        period: 600 # 10 minutes
      functionDuration:
        evaluationPeriods: 3
        datapointsToAlarm: 3

plugins:
  - serverless-plugin-aws-alerts
  - serverless-plugin-tracing
