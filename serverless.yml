service: brokalys-pinger

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs12.x
  cfLogs: true
  logRetentionInDays: 7
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: 'arn:aws:sns:eu-west-1:*:*'
  environment:
    STAGE: ${opt:stage, 'dev'}

functions:
  email:
    name: BrokalysPinger-Email-${self:provider.stage}
    description: Send email and log it.
    timeout: 10
    handler: src/email.run
    events:
      - sns: email-${self:provider.stage}
    alarms:
      - name: emailErrors
        namespace: 'AWS/Lambda'
        metric: Errors
        threshold: 1
        statistic: Sum
        period: 300 # 5 minutes
        evaluationPeriods: 2
        datapointsToAlarm: 2
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: notBreaching
      - name: emailInvocations
        namespace: 'AWS/Lambda'
        metric: Invocations
        threshold: 800
        statistic: Sum
        period: 86400 # 1 day
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        treatMissingData: breaching
  limit-locker:
    name: BrokalysPinger-LimitLocker-${self:provider.stage}
    description: Lock pingers that have reached the monthly lockout threshold.
    timeout: 2
    handler: src/limit-locker.run
    events:
      - schedule: rate(10 minutes)
  process-sqs:
    name: BrokalysPinger-ProcessSqs-${self:provider.stage}
    description: Process SQS to trigger pinger email sending.
    handler: src/process-sqs.run
    reservedConcurrency: 5
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PingerQueue
              - Arn
          batchSize: 10

custom:
  alerts:
    stages:
      - prod
    nameTemplate: $[functionName]-$[metricName]
    topics:
      ok:
        topic: ${self:service}-${self:provider.stage}-ok
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com
      alarm:
        topic: ${self:service}-${self:provider.stage}-alarm
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules:
      forceExclude:
        - aws-sdk
    packager: 'yarn'

plugins:
  - serverless-plugin-aws-alerts
  - serverless-webpack

resources:
  Resources:
    PingerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.stage}-pinger.fifo
        FifoQueue: true
